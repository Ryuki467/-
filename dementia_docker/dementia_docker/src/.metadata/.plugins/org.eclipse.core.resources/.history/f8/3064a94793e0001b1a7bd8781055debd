<?php
namespace App\Model\Table;

use Cake\ORM\Query;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;
use App\Library\DateTrait;

/**
 * Contents Model
 *
 * @property \App\Model\Table\MembersTable&\Cake\ORM\Association\BelongsTo $Members
 *
 * @method \App\Model\Entity\Lecture get($primaryKey, $options = [])
 * @method \App\Model\Entity\Lecture newEntity($data = null, array $options = [])
 * @method \App\Model\Entity\Lecture[] newEntities(array $data, array $options = [])
 * @method \App\Model\Entity\Lecture|false save(\Cake\Datasource\EntityInterface $entity, $options = [])
 * @method \App\Model\Entity\Lecture saveOrFail(\Cake\Datasource\EntityInterface $entity, $options = [])
 * @method \App\Model\Entity\Lecture patchEntity(\Cake\Datasource\EntityInterface $entity, array $data, array $options = [])
 * @method \App\Model\Entity\Lecture[] patchEntities($entities, array $data, array $options = [])
 * @method \App\Model\Entity\Lecture findOrCreate($search, callable $callback = null, $options = [])
 *
 * @mixin \Cake\ORM\Behavior\TimestampBehavior
 */
class LecturesTable extends Table
{
    use DateTrait {
        convertToUtcTime as private _convertToUtcTime;
    }

    /**
     * Initialize method
     *
     * @param array $config The configuration for the Table.
     * @return void
     */
    public function initialize(array $config)
    {
        parent::initialize($config);

        $this->setTable('lectures');
        $this->setDisplayField('title');
        $this->setPrimaryKey('id');

        $this->addBehavior('Timestamp');

        $this->belongsTo('Members', [
            'foreignKey' => 'member_id',
        ]);
    }

    /**
     * Default validation rules.
     *
     * @param \Cake\Validation\Validator $validator Validator instance.
     * @return \Cake\Validation\Validator
     */
    public function validationDefault(Validator $validator)
    {
        $validator
            ->integer('id')
            ->allowEmptyString('id', null, 'create');

        $validator
            ->scalar('title')
            ->notEmptyString('title');

        $validator
            ->scalar('message')
            ->allowEmptyString('message');

        $validator
            ->scalar('movie_url')
            ->allowEmptyString('movie_url');

        $validator
            ->date('start_date', ['ymd'])
            ->allowEmptyDateTime('start_date');

        $validator
            ->date('finish_date', ['ymd'])
            ->allowEmptyDateTime('finish_date');

        $validator
            ->integer('display_flg')
            ->allowEmptyString('display_flg');
        return $validator;
    }

    /**
     * Returns a rules checker object that will be used for validating
     * application integrity.
     *
     * @param \Cake\ORM\RulesChecker $rules The rules object to be modified.
     * @return \Cake\ORM\RulesChecker
     */
    public function buildRules(RulesChecker $rules)
    {
        $rules->add($rules->existsIn(['member_id'], 'Members'));

        return $rules;
    }

    /**
     * 講習を取得する（検索条件付き）
     *
     * @param array $options List of options to pass to the finder, Or Search Params
     * @return query object
     */
    public function findLectures($options)
    {
        $query = $this->find();
        extract($options);
        
        if (!empty($title)) {
            $query->where(["Lectures.title like" => "%{$title}%"]);
        }
        
        if (isset($display_flg) && $display_flg !== '') {
            $query->where(["Lectures.display_flg" => $display_flg]);
        }

        return $query;
    }
    
    public function findLectures_status($options)
    {
        $query = $this->find();
        extract($options);

        if (!empty($title)) {
            $query->where(["Lectures.title like" => "%{$title}%"]);
        }

        if (isset($display_flg) && $display_flg !== '') {
            $query->where(["Lectures.display_flg" => $display_flg]);
        }
        
        return $query;
    }
}
